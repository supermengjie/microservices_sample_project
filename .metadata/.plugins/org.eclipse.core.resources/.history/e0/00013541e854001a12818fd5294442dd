package com.infosys.cutomer_service.controller;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.infosys.cutomer_service.dto.CustomerDTO;
import com.infosys.cutomer_service.exceptionHandler.CustomerNotFoundException;
import com.infosys.cutomer_service.service.CustomerService;

@RestController
@RequestMapping("customers")
@CrossOrigin
public class CustomerController {
	
	Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	CustomerService customerService;
	
	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	public List<CustomerDTO> getAllCustomer() {
		logger.info("Cusotmers request for getting all cusotmers");
		List<CustomerDTO> allCustomers = customerService.findCustomer();
		
		return allCustomers;
	}
	
	@GetMapping(value="/{id}",produces = MediaType.APPLICATION_JSON_VALUE)
	public CustomerDTO getCustomer(@PathVariable int id) {
		logger.info("Customers request for custumerId {}", id);
		CustomerDTO customer = customerService.findCustomerById(id);
		if(customer == null) {
			logger.error("Customer with id {} not foud, an exception is thrown");
			throw new CustomerNotFoundException(id);
		}
		return new ResponseEntity<CustomerDTO>(customer, HttpStatus.OK);
	}
	
	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> addCustomer(@Valid @RequestBody CustomerDTO customer) {
		logger.info("Creating Customers for customer{}", customer);
		customerService.save(customer);
		return new ResponseEntity<>(null, HttpStatus.CREATED);
	}

}
